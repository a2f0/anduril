### $Id: network.stubs,v 1.11 2002/07/27 02:56:34 wd Exp $
ac.package network

alias newnetwork {
    if ([$0] == []) {
	@usage(newnetwork)
	return
    }
	
    @:network = tolower($0)
    @:caps = [lmoh]
		
    @:file = [$apath/share/network/$network]
    if (fexist($file) != -1) {
	@:mask = ac.question(Definition for this network already exists, overwrite it? [y/N]:)
	unless (left(1 $mask) == [y]) {
	    return
	}
    }
	
    //^window new name config hide swap last
    @unlink($file)
    @:fd = open($file W)
    if (fd < 0) {
	aerrecho couldn't create $file
	return
    }
	
    @write($fd # Automatically generated network definition for $0)
    @write($fd )
    ### first, ask them which kind of detection to use.
    aecho #1: Server name suffix (i.e. *.dal.net, *.undernet.org)
    aecho     this requires all servers on the network to share this suffix
    aecho #2: Server version mask (i.e. bahamut* or 2.8hybrid/*)
    aecho     this is less reliable as most daemons can be used on many networks
    aecho #3: Server in network list
    aecho     this is the least reliable (sort of) as networks tend to change
    aecho     servers frequently.  However, on networks like EFnet where
    aecho     servers use different versions and don't have a common suffix
    aecho     this may be necessary
    aecho
    
    @:type = -1
    while (type < 1 || type > 3) {
	@:type = ac.question(make a selection from 1-3:)
    }

    ### now begin creating their output file
    @write($fd alias a.network.is_$0 \{)
	
    ### okay, depending on their type choice we ask them different questions
    switch ($type) {
	(1) {
	    @:mask = []
	    while (mask == []) {
		@:mask = ac.question(enter a suffix or mask (i.e. *.dal.net or undernet.org):)
	    }
	    if (!ismask($mask)) {
		@:mask = [*$mask]
	    }
	    @write($fd 	if \(match\($mask $$0\)\) \{)
	    @write($fd 		return 1)
	    @write($fd 	\} else \{)
	    @write($fd 		return 0)
	    @write($fd 	\})
	    @write($fd \})

	    @:caps #= [t]
	}
	(2) {
	    @:mask = []
	    while (mask == []) {
		@:mask = ac.question(enter one or more version masks (i.e. bahamut* or 2.8/hybrid*):)
	    }
	    @write($fd 	if \(rmatch\($$1 $mask\)\) \{)
	    @write($fd 		return 1)
	    @write($fd 	\} else \{)
	    @write($fd 		return 0)
	    @write($fd 	\})
	    @write($fd \})
	}
	(3) {
	    @:mask = ac.question(get this network list now (from the current server)? [Y/n]:)
	    unless (left(1 $mask) == [n]) {
		nlist -s $network
	    }
	    @write($fd 	if \(rmatch\($$0 $$a.network.${network}.list\)\) \{)
	    @write($fd 		return 1)
	    @write($fd 	\} else \{)
	    @write($fd 		return 0)
	    @write($fd 	\})
	    @write($fd \})
	}		
    }

    @:in = [x]
    while (!isnumber($in)) {
	@:input = ac.question(how many characters are nicks on this network [9]:)
	if (input != []) {
	    @:in = input
	} else {
	    @:in = 9
	}
    }
    @:cap_args = [$in ]
    @:in = [x]
    while (!isnumber($in)) {
	@:input = ac.question(how many modes are allowed in one /mode command? [3]:)
	if (input != []) {
	    @:in = input
	} else {
	    @:in = 3
	}
    }
    @:cap_args #= [$in ]
    aecho there are three different /wall styles supported:
    aecho EFnet's (e): effectively no special handling, no special support (safe)
    aecho Undernet's (u): uses the server's WALLCHOPS command
    aecho DALnet's (d): uses /notice @#channel
    aecho if you are unsure, leave the default as it will work on all networks
    aecho
    @:in = [x]
    while (pass(eud $in) == []) {
	@:input = ac.question(enter the type of channel wall support [e]:)
	if (input != []) {
	    @:in = input
	} else {
	    @:in = [e]
	}
    }
    @:cap_args #= [$in]
    aecho there are three different /who styles supported:
    aecho EFnet's (e): effectively no special handling, no special support (safe)
    aecho Undernet's (u): uses the -ux extension to /who
    aecho DALnet's (d): uses the -dx extension to /who
    aecho if you are unsure, leave the default as it will work on all networks
    aecho
    @:in = [x]
    while (pass(eud $in) == []) {
	@:input = ac.question(enter the type of /who support [e]:)
	if (input != []) {
	    @:in = input
	} else {
	    @:in = [e]
	}
    }
    @:cap_args #= [$in]
    @:input = ac.question(does this network have channel/nick services (ChanServ etc)? [y/N]:)
    if (left(1 $input) == [y]) {
	@:caps #= [s]
    }
    @:input = ac.question(does this network support the server-side WATCH commands? [y/N]:)
    if (left(1 $input) == [y]) {
	@:caps #= [w]
    }

    @write($fd )
    @write($fd a.network.caps $network $caps $cap_args)
    @close($fd)

    //^window killswap
    aecho a network definition for the network $network has been created
    @:file #= [.list]
    if (fexist($file) == -1) {
	aecho warning: a network list does not exist for this network, if one
	aecho is not created, this definition will not function.  would you like
	aecho me to get a list from this server \($builtin_expando(S)\) (y)
	aecho or make an empty list (n)?
	@:input = ac.question(get a list of servers for this network? [Y/n]:)
	if (left(1 $input) == [n]) {
	    @:fd = open($file W)
	    @write($fd )
	    @close($fd)
	} else {
	    nlist -s $network
	    ^load $apath/share/network/$network
	}
    } else {
	^load $apath/share/network/$network
    }
}

### vi:set ts=8 sts=4 sw=4 tw=79 syntax=off ai smartindent:
